import { TestAllTypes } from "./asproto/test/TestAllTypes";
import { ForeignEnum } from "./asproto/test/ForeignEnum";
import { ForeignMessage } from "./asproto/test/ForeignMessage";
import { Protobuf } from "as-proto/assembly";
import { BlockAndReceipts } from "./receipts/v1/BlockAndReceipts";

export function encode(): Uint8Array {
  const BYTES = new Uint8Array(4);
  BYTES[0] = 1;
  BYTES[1] = 2;
  BYTES[2] = 8;
  BYTES[3] = 9;

  const message = new TestAllTypes(
    // TODO: add support for optional
    // -42,
    // -0x7fffffff00000000,
    // 0x80000000,
    // 0xf000000000000000,
    // -100,
    // -0x8000000000000000,
    // 1234,
    // 0x1234567800000000,
    // -1234,
    // -0x1234567800000000,
    // 1.5,
    // -1.5,
    // true,
    // "hello world",
    // BYTES,
    // new asproto.test.ForeignMessage(16),
    // asproto.test.ForeignEnum.FOREIGN_FOO,
    [-42],
    [-0x7fffffff00000000],
    [0x80000000],
    [0xf000000000000000],
    [-100],
    [-0x8000000000000000],
    [1234],
    [0x1234567800000000],
    [-1234],
    [-0x1234567800000000],
    [1.5],
    [-1.5],
    [true],
    ["hello world"],
    [BYTES, BYTES],
    [new ForeignMessage(1000)],
    [ForeignEnum.FOREIGN_FOO]
    // TODO: add support for packed
    // [-42],
    // [-0x7fffffff00000000],
    // [0x80000000],
    // [0xf000000000000000],
    // [-100],
    // [-0x8000000000000000],
    // [1234],
    // [0x1234567800000000],
    // [-1234],
    // [-0x1234567800000000],
    // [1.5],
    // [-1.5],
    // [true]
    // TODO: add support for oneof
  );
  return Protobuf.encode<TestAllTypes>(message, TestAllTypes.encode);
}

export function decode(bytes: Uint8Array): boolean {
  const message = Protobuf.decode<TestAllTypes>(bytes, TestAllTypes.decode);

  // TODO: add support for optional
  assert(message.repeatedInt32[0] === -42);
  assert(message.repeatedInt64[0] === -0x7fffffff00000000);
  assert(message.repeatedUint32[0] === 0x80000000);
  assert(message.repeatedUint64[0] === 0xf000000000000000);
  assert(message.repeatedSint32[0] === -100);
  assert(message.repeatedSint64[0] === -0x8000000000000000);
  assert(message.repeatedFixed32[0] === 1234);
  assert(message.repeatedFixed64[0] === 0x1234567800000000);
  assert(message.repeatedSfixed32[0] === -1234);
  assert(message.repeatedSfixed64[0] === -0x1234567800000000);
  assert(message.repeatedFloat[0] === 1.5);
  assert(message.repeatedDouble[0] === -1.5);
  assert(message.repeatedBool[0] === true);
  // XXX: === doesn't work here - probably because old version of AS
  assert(message.repeatedString[0] == "hello world");
  assert(message.repeatedBytes[0][0] === 1);
  assert(message.repeatedBytes[0][1] === 2);
  assert(message.repeatedBytes[0][2] === 8);
  assert(message.repeatedBytes[0][3] === 9);
  assert(message.repeatedBytes[1][0] === 1);
  assert(message.repeatedBytes[1][1] === 2);
  assert(message.repeatedBytes[1][2] === 8);
  assert(message.repeatedBytes[1][3] === 9);
  assert(message.repeatedForeignMessage[0].c === 1000);
  assert(message.repeatedForeignEnum[0] === ForeignEnum.FOREIGN_FOO);
  // TODO: add support for packed
  // TODO: add support for oneof

  return true;
}

export function decodeBlockAndReceipt(): void {
  // let bs = [10, 161, 13, 10, 17, 110, 102, 118, 97, 108, 105, 100, 97, 116, 111, 114, 51, 46, 110, 101, 97, 114, 18, 140, 7, 8, 187, 176, 215, 4, 16, 184, 176, 215, 4, 26, 34, 10, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 34, 10, 32, 198, 253, 249, 28, 142, 130, 248, 249, 23, 204, 25, 117, 233, 222, 28, 100, 190, 17, 137, 158, 50, 29, 253, 245, 254, 188, 251, 183, 49, 63, 20, 134, 42, 34, 10, 32, 20, 207, 192, 151, 179, 4, 135, 222, 121, 190, 111, 84, 82, 101, 205, 100, 173, 10, 127, 235, 232, 76, 250, 112, 26, 85, 129, 150, 172, 70, 137, 20, 50, 34, 10, 32, 48, 188, 255, 7, 58, 11, 209, 172, 87, 61, 207, 95, 78, 45, 111, 201, 131, 240, 71, 38, 13, 182, 194, 206, 98, 195, 240, 51, 127, 196, 217, 116, 58, 34, 10, 32, 71, 56, 121, 214, 114, 91, 137, 2, 64, 238, 225, 134, 174, 161, 241, 73, 96, 226, 19, 32, 148, 213, 91, 167, 1, 149, 129, 154, 122, 21, 83, 114, 66, 34, 10, 32, 122, 79, 222, 54, 164, 38, 222, 175, 94, 18, 82, 245, 113, 138, 6, 225, 120, 127, 141, 18, 203, 125, 165, 161, 128, 87, 250, 159, 251, 102, 206, 13, 74, 34, 10, 32, 163, 192, 26, 217, 243, 121, 229, 100, 63, 176, 89, 90, 84, 157, 114, 203, 92, 154, 135, 188, 173, 248, 189, 59, 214, 117, 99, 216, 134, 183, 18, 145, 82, 34, 10, 32, 102, 104, 122, 173, 248, 98, 189, 119, 108, 143, 193, 139, 142, 159, 142, 32, 8, 151, 20, 133, 110, 226, 51, 179, 144, 42, 89, 29, 13, 95, 41, 37, 90, 34, 10, 32, 102, 104, 122, 173, 248, 98, 189, 119, 108, 143, 193, 139, 142, 159, 142, 32, 8, 151, 20, 133, 110, 226, 51, 179, 144, 42, 89, 29, 13, 95, 41, 37, 96, 1, 106, 34, 10, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 228, 252, 128, 255, 151, 222, 248, 145, 22, 120, 228, 252, 128, 255, 151, 222, 248, 145, 22, 130, 1, 34, 10, 32, 171, 58, 178, 150, 95, 188, 84, 236, 47, 215, 168, 16, 205, 218, 49, 127, 76, 131, 109, 220, 46, 169, 220, 192, 196, 199, 202, 140, 122, 220, 32, 220, 146, 1, 1, 1, 154, 1, 18, 10, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 154, 202, 0, 170, 1, 18, 10, 16, 0, 0, 49, 77, 198, 68, 97, 155, 188, 36, 126, 183, 135, 226, 99, 128, 184, 1, 182, 176, 215, 4, 194, 1, 34, 10, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 1, 34, 10, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 218, 1, 34, 10, 32, 164, 53, 81, 121, 103, 137, 65, 35, 100, 206, 59, 159, 76, 68, 8, 104, 109, 125, 217, 141, 202, 134, 246, 232, 178, 8, 66, 188, 68, 204, 97, 80, 226, 1, 34, 10, 32, 154, 64, 99, 34, 214, 134, 180, 200, 101, 134, 230, 79, 228, 81, 29, 66, 56, 197, 111, 213, 43, 215, 174, 88, 190, 212, 140, 128, 171, 112, 27, 235, 242, 1, 66, 18, 64, 100, 232, 189, 249, 80, 84, 132, 137, 98, 231, 141, 164, 210, 61, 122, 61, 201, 85, 210, 136, 242, 99, 157, 182, 237, 195, 91, 154, 109, 133, 33, 183, 113, 246, 81, 179, 77, 190, 158, 156, 75, 116, 238, 111, 213, 38, 234, 86, 194, 108, 42, 125, 227, 64, 162, 108, 224, 205, 140, 248, 118, 89, 35, 14, 242, 1, 66, 18, 64, 149, 240, 6, 97, 119, 4, 110, 54, 119, 204, 189, 216, 245, 133, 120, 190, 159, 233, 142, 190, 111, 43, 121, 160, 102, 116, 45, 15, 255, 121, 197, 91, 79, 161, 239, 233, 19, 55, 239, 124, 21, 192, 185, 230, 250, 58, 48, 108, 250, 116, 180, 7, 5, 61, 117, 93, 227, 174, 164, 123, 115, 92, 44, 0, 242, 1, 66, 18, 64, 207, 79, 179, 101, 125, 189, 154, 232, 237, 151, 248, 11, 176, 12, 190, 78, 56, 11, 50, 198, 246, 46, 157, 112, 247, 23, 23, 236, 177, 238, 26, 190, 24, 174, 204, 79, 149, 83, 147, 105, 41, 116, 243, 134, 23, 141, 114, 118, 115, 231, 217, 146, 103, 70, 67, 31, 214, 20, 187, 43, 232, 35, 162, 3, 250, 1, 66, 18, 64, 98, 80, 14, 226, 53, 203, 172, 22, 156, 28, 54, 43, 20, 150, 63, 144, 119, 217, 44, 216, 216, 98, 97, 119, 48, 23, 165, 10, 111, 236, 88, 201, 65, 228, 38, 62, 98, 91, 96, 111, 140, 33, 105, 176, 53, 87, 106, 33, 79, 184, 70, 96, 151, 222, 30, 221, 91, 108, 246, 168, 110, 78, 49, 6, 128, 2, 30, 26, 240, 2, 10, 32, 16, 230, 68, 236, 54, 198, 212, 0, 108, 115, 11, 130, 86, 59, 9, 191, 167, 126, 221, 216, 27, 104, 99, 28, 245, 85, 61, 38, 42, 33, 104, 115, 18, 32, 48, 188, 255, 7, 58, 11, 209, 172, 87, 61, 207, 95, 78, 45, 111, 201, 131, 240, 71, 38, 13, 182, 194, 206, 98, 195, 240, 51, 127, 196, 217, 116, 26, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 32, 107, 132, 56, 34, 43, 227, 183, 254, 124, 216, 251, 200, 134, 58, 92, 219, 0, 98, 12, 87, 205, 99, 119, 84, 239, 177, 58, 74, 60, 164, 111, 53, 42, 32, 133, 155, 173, 246, 235, 166, 20, 231, 10, 220, 133, 22, 95, 244, 121, 96, 99, 183, 100, 182, 69, 129, 44, 128, 83, 214, 168, 250, 11, 240, 54, 133, 48, 8, 56, 185, 176, 215, 4, 64, 187, 176, 215, 4, 88, 128, 128, 154, 166, 234, 175, 227, 1, 98, 18, 10, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 18, 10, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 32, 238, 155, 146, 227, 36, 224, 52, 26, 150, 93, 175, 41, 179, 149, 85, 3, 14, 44, 14, 85, 145, 215, 211, 226, 189, 5, 255, 120, 95, 148, 107, 5, 122, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 1, 66, 18, 64, 212, 123, 68, 61, 121, 1, 58, 126, 170, 41, 42, 75, 197, 168, 50, 77, 238, 192, 190, 203, 222, 14, 83, 146, 82, 19, 66, 174, 53, 57, 152, 166, 222, 108, 197, 187, 55, 0, 231, 187, 177, 122, 126, 23, 53, 68, 111, 26, 223, 98, 33, 31, 93, 7, 32, 181, 203, 56, 161, 102, 36, 14, 200, 0, 34, 137, 3, 18, 134, 3, 10, 17, 110, 102, 118, 97, 108, 105, 100, 97, 116, 111, 114, 50, 46, 110, 101, 97, 114, 18, 240, 2, 10, 32, 16, 230, 68, 236, 54, 198, 212, 0, 108, 115, 11, 130, 86, 59, 9, 191, 167, 126, 221, 216, 27, 104, 99, 28, 245, 85, 61, 38, 42, 33, 104, 115, 18, 32, 48, 188, 255, 7, 58, 11, 209, 172, 87, 61, 207, 95, 78, 45, 111, 201, 131, 240, 71, 38, 13, 182, 194, 206, 98, 195, 240, 51, 127, 196, 217, 116, 26, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 32, 107, 132, 56, 34, 43, 227, 183, 254, 124, 216, 251, 200, 134, 58, 92, 219, 0, 98, 12, 87, 205, 99, 119, 84, 239, 177, 58, 74, 60, 164, 111, 53, 42, 32, 133, 155, 173, 246, 235, 166, 20, 231, 10, 220, 133, 22, 95, 244, 121, 96, 99, 183, 100, 182, 69, 129, 44, 128, 83, 214, 168, 250, 11, 240, 54, 133, 48, 8, 56, 185, 176, 215, 4, 64, 187, 176, 215, 4, 88, 128, 128, 154, 166, 234, 175, 227, 1, 98, 18, 10, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 18, 10, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 32, 238, 155, 146, 227, 36, 224, 52, 26, 150, 93, 175, 41, 179, 149, 85, 3, 14, 44, 14, 85, 145, 215, 211, 226, 189, 5, 255, 120, 95, 148, 107, 5, 122, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 1, 66, 18, 64, 212, 123, 68, 61, 121, 1, 58, 126, 170, 41, 42, 75, 197, 168, 50, 77, 238, 192, 190, 203, 222, 14, 83, 146, 82, 19, 66, 174, 53, 57, 152, 166, 222, 108, 197, 187, 55, 0, 231, 187, 177, 122, 126, 23, 53, 68, 111, 26, 223, 98, 33, 31, 93, 7, 32, 181, 203, 56, 161, 102, 36, 14, 200, 0];
  let bs = [10,144,10,10,17,110,102,118,97,108,105,100,97,116,111,114,50,46,110,101,97,114,18,133,7,8,182,176,215,4,26,34,10,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,34,10,32,198,253,249,28,142,130,248,249,23,204,25,117,233,222,28,100,190,17,137,158,50,29,253,245,254,188,251,183,49,63,20,134,42,34,10,32,167,17,11,144,82,225,190,104,247,250,139,180,6,91,245,78,115,18,5,128,24,120,231,8,219,116,100,236,75,155,128,20,50,34,10,32,198,253,249,28,142,130,248,249,23,204,25,117,233,222,28,100,190,17,137,158,50,29,253,245,254,188,251,183,49,63,20,134,58,34,10,32,71,56,121,214,114,91,137,2,64,238,225,134,174,161,241,73,96,226,19,32,148,213,91,167,1,149,129,154,122,21,83,114,66,34,10,32,102,104,122,173,248,98,189,119,108,143,193,139,142,159,142,32,8,151,20,133,110,226,51,179,144,42,89,29,13,95,41,37,74,34,10,32,150,31,126,24,88,143,214,218,79,36,87,144,166,205,102,127,151,132,157,152,31,34,24,247,40,255,236,225,194,198,215,5,82,34,10,32,102,104,122,173,248,98,189,119,108,143,193,139,142,159,142,32,8,151,20,133,110,226,51,179,144,42,89,29,13,95,41,37,90,34,10,32,102,104,122,173,248,98,189,119,108,143,193,139,142,159,142,32,8,151,20,133,110,226,51,179,144,42,89,29,13,95,41,37,106,34,10,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,204,176,221,131,246,221,248,145,22,120,204,176,221,131,246,221,248,145,22,130,1,34,10,32,213,22,93,195,149,139,214,67,119,225,171,26,198,57,253,225,185,221,151,93,92,249,3,160,169,36,0,49,241,179,231,228,146,1,1,0,154,1,18,10,16,0,0,0,0,0,0,0,0,0,0,0,0,59,154,202,0,170,1,18,10,16,0,0,49,77,198,68,97,155,188,36,126,183,135,226,99,128,184,1,182,176,215,4,194,1,34,10,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,1,34,10,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,218,1,34,10,32,164,53,81,121,103,137,65,35,100,206,59,159,76,68,8,104,109,125,217,141,202,134,246,232,178,8,66,188,68,204,97,80,226,1,34,10,32,198,253,249,28,142,130,248,249,23,204,25,117,233,222,28,100,190,17,137,158,50,29,253,245,254,188,251,183,49,63,20,134,242,1,66,18,64,92,203,207,238,222,18,110,203,194,83,85,123,247,252,108,28,84,165,34,86,127,162,48,188,204,221,243,239,40,230,136,3,139,177,70,6,59,47,32,227,192,244,123,117,62,79,187,219,48,48,170,88,134,160,42,216,38,54,33,4,175,9,27,14,242,1,66,18,64,52,93,138,160,2,255,110,237,20,1,20,165,226,175,117,129,144,37,160,233,183,76,41,222,159,71,133,135,245,243,31,208,193,234,199,165,146,57,31,243,218,176,88,46,122,201,53,119,235,77,146,116,80,39,103,245,67,63,146,106,80,140,143,8,242,1,66,18,64,118,187,56,59,223,196,228,139,83,78,24,25,190,120,194,165,173,199,62,149,168,8,106,6,169,189,233,21,115,173,31,2,248,242,200,103,209,3,10,63,39,163,238,145,132,147,117,188,2,100,6,153,247,236,177,21,104,14,132,57,14,25,63,4,250,1,66,18,64,80,235,138,180,243,238,70,176,97,89,241,89,150,182,241,4,193,125,247,223,92,99,21,46,94,54,86,210,132,126,246,124,245,136,131,140,100,189,106,89,160,226,184,255,48,217,102,246,69,205,34,73,116,179,226,82,188,146,6,3,242,142,206,13,128,2,30,26,240,2,10,32,170,130,240,92,130,48,177,201,33,165,102,101,140,93,21,101,194,201,47,43,163,5,251,91,7,115,251,248,165,237,27,230,18,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,32,107,132,56,34,43,227,183,254,124,216,251,200,134,58,92,219,0,98,12,87,205,99,119,84,239,177,58,74,60,164,111,53,42,32,33,226,197,97,21,62,126,82,109,226,104,2,68,141,70,230,242,219,36,109,23,181,113,90,11,100,133,117,205,166,240,106,48,8,56,178,176,215,4,64,178,176,215,4,88,128,128,154,166,234,175,227,1,98,18,10,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,18,10,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,1,66,18,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,0];
  let arr = new Uint8Array(bs.length);
  for (let i = 0; i < bs.length; ++i) {
    arr[i] = bs[i];
  }

  const decoded = Protobuf.decode < BlockAndReceipts > (arr, BlockAndReceipts.decode);
 }
