// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.24.4

import { Writer, Reader } from "as-proto/assembly";
import { FunctionCallPermission } from "./FunctionCallPermission";
import { FullAccessPermission } from "./FullAccessPermission";

export class AccessKeyPermission {
  static encode(message: AccessKeyPermission, writer: Writer): void {
    const functionCall = message.functionCall;
    if (functionCall !== null) {
      writer.uint32(10);
      writer.fork();
      FunctionCallPermission.encode(functionCall, writer);
      writer.ldelim();
    }

    const fullAccess = message.fullAccess;
    if (fullAccess !== null) {
      writer.uint32(18);
      writer.fork();
      FullAccessPermission.encode(fullAccess, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): AccessKeyPermission {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new AccessKeyPermission();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.functionCall = FunctionCallPermission.decode(
            reader,
            reader.uint32()
          );
          break;

        case 2:
          message.fullAccess = FullAccessPermission.decode(
            reader,
            reader.uint32()
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  functionCall: FunctionCallPermission | null;
  fullAccess: FullAccessPermission | null;

  constructor(
    functionCall: FunctionCallPermission | null = null,
    fullAccess: FullAccessPermission | null = null
  ) {
    this.functionCall = functionCall;
    this.fullAccess = fullAccess;
  }
}
