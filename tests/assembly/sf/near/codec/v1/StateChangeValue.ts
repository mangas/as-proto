// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.24.4

import { Writer, Reader } from "as-proto/assembly";
import { AccountUpdate } from "./StateChangeValue/AccountUpdate";
import { AccountDeletion } from "./StateChangeValue/AccountDeletion";
import { AccessKeyUpdate } from "./StateChangeValue/AccessKeyUpdate";
import { AccessKeyDeletion } from "./StateChangeValue/AccessKeyDeletion";
import { DataUpdate } from "./StateChangeValue/DataUpdate";
import { DataDeletion } from "./StateChangeValue/DataDeletion";
import { ContractCodeUpdate } from "./StateChangeValue/ContractCodeUpdate";
import { ContractCodeDeletion } from "./StateChangeValue/ContractCodeDeletion";

export class StateChangeValue {
  static encode(message: StateChangeValue, writer: Writer): void {
    const accountUpdate = message.accountUpdate;
    if (accountUpdate !== null) {
      writer.uint32(10);
      writer.fork();
      AccountUpdate.encode(accountUpdate, writer);
      writer.ldelim();
    }

    const accountDeletion = message.accountDeletion;
    if (accountDeletion !== null) {
      writer.uint32(18);
      writer.fork();
      AccountDeletion.encode(accountDeletion, writer);
      writer.ldelim();
    }

    const accessKeyUpdate = message.accessKeyUpdate;
    if (accessKeyUpdate !== null) {
      writer.uint32(26);
      writer.fork();
      AccessKeyUpdate.encode(accessKeyUpdate, writer);
      writer.ldelim();
    }

    const accessKeyDeletion = message.accessKeyDeletion;
    if (accessKeyDeletion !== null) {
      writer.uint32(34);
      writer.fork();
      AccessKeyDeletion.encode(accessKeyDeletion, writer);
      writer.ldelim();
    }

    const dataUpdate = message.dataUpdate;
    if (dataUpdate !== null) {
      writer.uint32(42);
      writer.fork();
      DataUpdate.encode(dataUpdate, writer);
      writer.ldelim();
    }

    const dataDeletion = message.dataDeletion;
    if (dataDeletion !== null) {
      writer.uint32(50);
      writer.fork();
      DataDeletion.encode(dataDeletion, writer);
      writer.ldelim();
    }

    const contractCodeUpdate = message.contractCodeUpdate;
    if (contractCodeUpdate !== null) {
      writer.uint32(58);
      writer.fork();
      ContractCodeUpdate.encode(contractCodeUpdate, writer);
      writer.ldelim();
    }

    const contractDeletion = message.contractDeletion;
    if (contractDeletion !== null) {
      writer.uint32(66);
      writer.fork();
      ContractCodeDeletion.encode(contractDeletion, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): StateChangeValue {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new StateChangeValue();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.accountUpdate = AccountUpdate.decode(reader, reader.uint32());
          break;

        case 2:
          message.accountDeletion = AccountDeletion.decode(
            reader,
            reader.uint32()
          );
          break;

        case 3:
          message.accessKeyUpdate = AccessKeyUpdate.decode(
            reader,
            reader.uint32()
          );
          break;

        case 4:
          message.accessKeyDeletion = AccessKeyDeletion.decode(
            reader,
            reader.uint32()
          );
          break;

        case 5:
          message.dataUpdate = DataUpdate.decode(reader, reader.uint32());
          break;

        case 6:
          message.dataDeletion = DataDeletion.decode(reader, reader.uint32());
          break;

        case 7:
          message.contractCodeUpdate = ContractCodeUpdate.decode(
            reader,
            reader.uint32()
          );
          break;

        case 8:
          message.contractDeletion = ContractCodeDeletion.decode(
            reader,
            reader.uint32()
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  accountUpdate: AccountUpdate | null;
  accountDeletion: AccountDeletion | null;
  accessKeyUpdate: AccessKeyUpdate | null;
  accessKeyDeletion: AccessKeyDeletion | null;
  dataUpdate: DataUpdate | null;
  dataDeletion: DataDeletion | null;
  contractCodeUpdate: ContractCodeUpdate | null;
  contractDeletion: ContractCodeDeletion | null;

  constructor(
    accountUpdate: AccountUpdate | null = null,
    accountDeletion: AccountDeletion | null = null,
    accessKeyUpdate: AccessKeyUpdate | null = null,
    accessKeyDeletion: AccessKeyDeletion | null = null,
    dataUpdate: DataUpdate | null = null,
    dataDeletion: DataDeletion | null = null,
    contractCodeUpdate: ContractCodeUpdate | null = null,
    contractDeletion: ContractCodeDeletion | null = null
  ) {
    this.accountUpdate = accountUpdate;
    this.accountDeletion = accountDeletion;
    this.accessKeyUpdate = accessKeyUpdate;
    this.accessKeyDeletion = accessKeyDeletion;
    this.dataUpdate = dataUpdate;
    this.dataDeletion = dataDeletion;
    this.contractCodeUpdate = contractCodeUpdate;
    this.contractDeletion = contractDeletion;
  }
}
