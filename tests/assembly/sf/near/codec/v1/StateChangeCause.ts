// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.24.4

import { Writer, Reader } from "as-proto/assembly";
import { NotWritableToDisk } from "./StateChangeCause/NotWritableToDisk";
import { InitialState } from "./StateChangeCause/InitialState";
import { TransactionProcessing } from "./StateChangeCause/TransactionProcessing";
import { ActionReceiptProcessingStarted } from "./StateChangeCause/ActionReceiptProcessingStarted";
import { ActionReceiptGasReward } from "./StateChangeCause/ActionReceiptGasReward";
import { ReceiptProcessing } from "./StateChangeCause/ReceiptProcessing";
import { PostponedReceipt } from "./StateChangeCause/PostponedReceipt";
import { UpdatedDelayedReceipts } from "./StateChangeCause/UpdatedDelayedReceipts";
import { ValidatorAccountsUpdate } from "./StateChangeCause/ValidatorAccountsUpdate";
import { Migration } from "./StateChangeCause/Migration";

export class StateChangeCause {
  static encode(message: StateChangeCause, writer: Writer): void {
    const notWritableToDisk = message.notWritableToDisk;
    if (notWritableToDisk !== null) {
      writer.uint32(10);
      writer.fork();
      NotWritableToDisk.encode(notWritableToDisk, writer);
      writer.ldelim();
    }

    const initialState = message.initialState;
    if (initialState !== null) {
      writer.uint32(18);
      writer.fork();
      InitialState.encode(initialState, writer);
      writer.ldelim();
    }

    const transactionProcessing = message.transactionProcessing;
    if (transactionProcessing !== null) {
      writer.uint32(26);
      writer.fork();
      TransactionProcessing.encode(transactionProcessing, writer);
      writer.ldelim();
    }

    const actionReceiptProcessingStarted =
      message.actionReceiptProcessingStarted;
    if (actionReceiptProcessingStarted !== null) {
      writer.uint32(34);
      writer.fork();
      ActionReceiptProcessingStarted.encode(
        actionReceiptProcessingStarted,
        writer
      );
      writer.ldelim();
    }

    const actionReceiptGasReward = message.actionReceiptGasReward;
    if (actionReceiptGasReward !== null) {
      writer.uint32(42);
      writer.fork();
      ActionReceiptGasReward.encode(actionReceiptGasReward, writer);
      writer.ldelim();
    }

    const receiptProcessing = message.receiptProcessing;
    if (receiptProcessing !== null) {
      writer.uint32(50);
      writer.fork();
      ReceiptProcessing.encode(receiptProcessing, writer);
      writer.ldelim();
    }

    const postponedReceipt = message.postponedReceipt;
    if (postponedReceipt !== null) {
      writer.uint32(58);
      writer.fork();
      PostponedReceipt.encode(postponedReceipt, writer);
      writer.ldelim();
    }

    const updatedDelayedReceipts = message.updatedDelayedReceipts;
    if (updatedDelayedReceipts !== null) {
      writer.uint32(66);
      writer.fork();
      UpdatedDelayedReceipts.encode(updatedDelayedReceipts, writer);
      writer.ldelim();
    }

    const validatorAccountsUpdate = message.validatorAccountsUpdate;
    if (validatorAccountsUpdate !== null) {
      writer.uint32(74);
      writer.fork();
      ValidatorAccountsUpdate.encode(validatorAccountsUpdate, writer);
      writer.ldelim();
    }

    const migration = message.migration;
    if (migration !== null) {
      writer.uint32(82);
      writer.fork();
      Migration.encode(migration, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): StateChangeCause {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new StateChangeCause();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.notWritableToDisk = NotWritableToDisk.decode(
            reader,
            reader.uint32()
          );
          break;

        case 2:
          message.initialState = InitialState.decode(reader, reader.uint32());
          break;

        case 3:
          message.transactionProcessing = TransactionProcessing.decode(
            reader,
            reader.uint32()
          );
          break;

        case 4:
          message.actionReceiptProcessingStarted =
            ActionReceiptProcessingStarted.decode(reader, reader.uint32());
          break;

        case 5:
          message.actionReceiptGasReward = ActionReceiptGasReward.decode(
            reader,
            reader.uint32()
          );
          break;

        case 6:
          message.receiptProcessing = ReceiptProcessing.decode(
            reader,
            reader.uint32()
          );
          break;

        case 7:
          message.postponedReceipt = PostponedReceipt.decode(
            reader,
            reader.uint32()
          );
          break;

        case 8:
          message.updatedDelayedReceipts = UpdatedDelayedReceipts.decode(
            reader,
            reader.uint32()
          );
          break;

        case 9:
          message.validatorAccountsUpdate = ValidatorAccountsUpdate.decode(
            reader,
            reader.uint32()
          );
          break;

        case 10:
          message.migration = Migration.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  notWritableToDisk: NotWritableToDisk | null;
  initialState: InitialState | null;
  transactionProcessing: TransactionProcessing | null;
  actionReceiptProcessingStarted: ActionReceiptProcessingStarted | null;
  actionReceiptGasReward: ActionReceiptGasReward | null;
  receiptProcessing: ReceiptProcessing | null;
  postponedReceipt: PostponedReceipt | null;
  updatedDelayedReceipts: UpdatedDelayedReceipts | null;
  validatorAccountsUpdate: ValidatorAccountsUpdate | null;
  migration: Migration | null;

  constructor(
    notWritableToDisk: NotWritableToDisk | null = null,
    initialState: InitialState | null = null,
    transactionProcessing: TransactionProcessing | null = null,
    actionReceiptProcessingStarted: ActionReceiptProcessingStarted | null = null,
    actionReceiptGasReward: ActionReceiptGasReward | null = null,
    receiptProcessing: ReceiptProcessing | null = null,
    postponedReceipt: PostponedReceipt | null = null,
    updatedDelayedReceipts: UpdatedDelayedReceipts | null = null,
    validatorAccountsUpdate: ValidatorAccountsUpdate | null = null,
    migration: Migration | null = null
  ) {
    this.notWritableToDisk = notWritableToDisk;
    this.initialState = initialState;
    this.transactionProcessing = transactionProcessing;
    this.actionReceiptProcessingStarted = actionReceiptProcessingStarted;
    this.actionReceiptGasReward = actionReceiptGasReward;
    this.receiptProcessing = receiptProcessing;
    this.postponedReceipt = postponedReceipt;
    this.updatedDelayedReceipts = updatedDelayedReceipts;
    this.validatorAccountsUpdate = validatorAccountsUpdate;
    this.migration = migration;
  }
}
