// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.24.4

import { Writer, Reader } from "as-proto/assembly";
import { BigInt } from "./BigInt";

export class FunctionCallPermission {
  static encode(message: FunctionCallPermission, writer: Writer): void {
    const allowance = message.allowance;
    if (allowance !== null) {
      writer.uint32(10);
      writer.fork();
      BigInt.encode(allowance, writer);
      writer.ldelim();
    }

    writer.uint32(18);
    writer.string(message.receiverId);

    const methodNames = message.methodNames;
    if (methodNames.length !== 0) {
      for (let i: i32 = 0; i < methodNames.length; ++i) {
        writer.uint32(26);
        writer.string(methodNames[i]);
      }
    }
  }

  static decode(reader: Reader, length: i32): FunctionCallPermission {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new FunctionCallPermission();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.allowance = BigInt.decode(reader, reader.uint32());
          break;

        case 2:
          message.receiverId = reader.string();
          break;

        case 3:
          message.methodNames.push(reader.string());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  allowance: BigInt | null;
  receiverId: string;
  methodNames: Array<string>;

  constructor(
    allowance: BigInt | null = null,
    receiverId: string = "",
    methodNames: Array<string> = []
  ) {
    this.allowance = allowance;
    this.receiverId = receiverId;
    this.methodNames = methodNames;
  }
}
