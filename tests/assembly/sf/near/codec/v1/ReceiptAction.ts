// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.24.4

import { Writer, Reader } from "as-proto/assembly";
import { PublicKey } from "./PublicKey";
import { BigInt } from "./BigInt";
import { DataReceiver } from "./DataReceiver";
import { CryptoHash } from "./CryptoHash";
import { Action } from "./Action";

export class ReceiptAction {
  static encode(message: ReceiptAction, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.signerId);

    const signerPublicKey = message.signerPublicKey;
    if (signerPublicKey !== null) {
      writer.uint32(18);
      writer.fork();
      PublicKey.encode(signerPublicKey, writer);
      writer.ldelim();
    }

    const gasPrice = message.gasPrice;
    if (gasPrice !== null) {
      writer.uint32(26);
      writer.fork();
      BigInt.encode(gasPrice, writer);
      writer.ldelim();
    }

    const outputDataReceivers = message.outputDataReceivers;
    for (let i: i32 = 0; i < outputDataReceivers.length; ++i) {
      writer.uint32(34);
      writer.fork();
      DataReceiver.encode(outputDataReceivers[i], writer);
      writer.ldelim();
    }

    const inputDataIds = message.inputDataIds;
    for (let i: i32 = 0; i < inputDataIds.length; ++i) {
      writer.uint32(42);
      writer.fork();
      CryptoHash.encode(inputDataIds[i], writer);
      writer.ldelim();
    }

    const actions = message.actions;
    for (let i: i32 = 0; i < actions.length; ++i) {
      writer.uint32(50);
      writer.fork();
      Action.encode(actions[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): ReceiptAction {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ReceiptAction();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.signerId = reader.string();
          break;

        case 2:
          message.signerPublicKey = PublicKey.decode(reader, reader.uint32());
          break;

        case 3:
          message.gasPrice = BigInt.decode(reader, reader.uint32());
          break;

        case 4:
          message.outputDataReceivers.push(
            DataReceiver.decode(reader, reader.uint32())
          );
          break;

        case 5:
          message.inputDataIds.push(CryptoHash.decode(reader, reader.uint32()));
          break;

        case 6:
          message.actions.push(Action.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  signerId: string;
  signerPublicKey: PublicKey | null;
  gasPrice: BigInt | null;
  outputDataReceivers: Array<DataReceiver>;
  inputDataIds: Array<CryptoHash>;
  actions: Array<Action>;

  constructor(
    signerId: string = "",
    signerPublicKey: PublicKey | null = null,
    gasPrice: BigInt | null = null,
    outputDataReceivers: Array<DataReceiver> = [],
    inputDataIds: Array<CryptoHash> = [],
    actions: Array<Action> = []
  ) {
    this.signerId = signerId;
    this.signerPublicKey = signerPublicKey;
    this.gasPrice = gasPrice;
    this.outputDataReceivers = outputDataReceivers;
    this.inputDataIds = inputDataIds;
    this.actions = actions;
  }
}
