// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.24.4

import { Writer, Reader } from "as-proto/assembly";
import { SignedTransaction } from "./SignedTransaction";
import { IndexerExecutionOutcomeWithOptionalReceipt } from "./IndexerExecutionOutcomeWithOptionalReceipt";

export class IndexerTransactionWithOutcome {
  static encode(message: IndexerTransactionWithOutcome, writer: Writer): void {
    const transaction = message.transaction;
    if (transaction !== null) {
      writer.uint32(10);
      writer.fork();
      SignedTransaction.encode(transaction, writer);
      writer.ldelim();
    }

    const outcome = message.outcome;
    if (outcome !== null) {
      writer.uint32(18);
      writer.fork();
      IndexerExecutionOutcomeWithOptionalReceipt.encode(outcome, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): IndexerTransactionWithOutcome {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new IndexerTransactionWithOutcome();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.transaction = SignedTransaction.decode(
            reader,
            reader.uint32()
          );
          break;

        case 2:
          message.outcome = IndexerExecutionOutcomeWithOptionalReceipt.decode(
            reader,
            reader.uint32()
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  transaction: SignedTransaction | null;
  outcome: IndexerExecutionOutcomeWithOptionalReceipt | null;

  constructor(
    transaction: SignedTransaction | null = null,
    outcome: IndexerExecutionOutcomeWithOptionalReceipt | null = null
  ) {
    this.transaction = transaction;
    this.outcome = outcome;
  }
}
