// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.24.4

import { Writer, Reader } from "as-proto/assembly";
import { BigInt } from "./BigInt";
import { CryptoHash } from "./CryptoHash";

export class Account {
  static encode(message: Account, writer: Writer): void {
    const amount = message.amount;
    if (amount !== null) {
      writer.uint32(10);
      writer.fork();
      BigInt.encode(amount, writer);
      writer.ldelim();
    }

    const locked = message.locked;
    if (locked !== null) {
      writer.uint32(18);
      writer.fork();
      BigInt.encode(locked, writer);
      writer.ldelim();
    }

    const codeHash = message.codeHash;
    if (codeHash !== null) {
      writer.uint32(26);
      writer.fork();
      CryptoHash.encode(codeHash, writer);
      writer.ldelim();
    }

    writer.uint32(32);
    writer.uint64(message.storageUsage);
  }

  static decode(reader: Reader, length: i32): Account {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Account();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.amount = BigInt.decode(reader, reader.uint32());
          break;

        case 2:
          message.locked = BigInt.decode(reader, reader.uint32());
          break;

        case 3:
          message.codeHash = CryptoHash.decode(reader, reader.uint32());
          break;

        case 4:
          message.storageUsage = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  amount: BigInt | null;
  locked: BigInt | null;
  codeHash: CryptoHash | null;
  storageUsage: u64;

  constructor(
    amount: BigInt | null = null,
    locked: BigInt | null = null,
    codeHash: CryptoHash | null = null,
    storageUsage: u64 = 0
  ) {
    this.amount = amount;
    this.locked = locked;
    this.codeHash = codeHash;
    this.storageUsage = storageUsage;
  }
}
