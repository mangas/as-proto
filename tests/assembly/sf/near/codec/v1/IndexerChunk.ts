// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.24.4

import { Writer, Reader } from "as-proto/assembly";
import { ChunkHeader } from "./ChunkHeader";
import { IndexerTransactionWithOutcome } from "./IndexerTransactionWithOutcome";
import { Receipt } from "./Receipt";

export class IndexerChunk {
  static encode(message: IndexerChunk, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.author);

    const header = message.header;
    if (header !== null) {
      writer.uint32(18);
      writer.fork();
      ChunkHeader.encode(header, writer);
      writer.ldelim();
    }

    const transactions = message.transactions;
    for (let i: i32 = 0; i < transactions.length; ++i) {
      writer.uint32(26);
      writer.fork();
      IndexerTransactionWithOutcome.encode(transactions[i], writer);
      writer.ldelim();
    }

    const receipts = message.receipts;
    for (let i: i32 = 0; i < receipts.length; ++i) {
      writer.uint32(34);
      writer.fork();
      Receipt.encode(receipts[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): IndexerChunk {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new IndexerChunk();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.author = reader.string();
          break;

        case 2:
          message.header = ChunkHeader.decode(reader, reader.uint32());
          break;

        case 3:
          message.transactions.push(
            IndexerTransactionWithOutcome.decode(reader, reader.uint32())
          );
          break;

        case 4:
          message.receipts.push(Receipt.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  author: string;
  header: ChunkHeader | null;
  transactions: Array<IndexerTransactionWithOutcome>;
  receipts: Array<Receipt>;

  constructor(
    author: string = "",
    header: ChunkHeader | null = null,
    transactions: Array<IndexerTransactionWithOutcome> = [],
    receipts: Array<Receipt> = []
  ) {
    this.author = author;
    this.header = header;
    this.transactions = transactions;
    this.receipts = receipts;
  }
}
