// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.24.4

import { Writer, Reader } from "as-proto/assembly";
import { PublicKey } from "./PublicKey";
import { Action } from "./Action";
import { Signature } from "./Signature";
import { CryptoHash } from "./CryptoHash";

export class SignedTransaction {
  static encode(message: SignedTransaction, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.signerId);

    const publicKey = message.publicKey;
    if (publicKey !== null) {
      writer.uint32(18);
      writer.fork();
      PublicKey.encode(publicKey, writer);
      writer.ldelim();
    }

    writer.uint32(24);
    writer.uint64(message.nonce);

    writer.uint32(34);
    writer.string(message.receiverId);

    const actions = message.actions;
    for (let i: i32 = 0; i < actions.length; ++i) {
      writer.uint32(42);
      writer.fork();
      Action.encode(actions[i], writer);
      writer.ldelim();
    }

    const signature = message.signature;
    if (signature !== null) {
      writer.uint32(50);
      writer.fork();
      Signature.encode(signature, writer);
      writer.ldelim();
    }

    const hash = message.hash;
    if (hash !== null) {
      writer.uint32(58);
      writer.fork();
      CryptoHash.encode(hash, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): SignedTransaction {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new SignedTransaction();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.signerId = reader.string();
          break;

        case 2:
          message.publicKey = PublicKey.decode(reader, reader.uint32());
          break;

        case 3:
          message.nonce = reader.uint64();
          break;

        case 4:
          message.receiverId = reader.string();
          break;

        case 5:
          message.actions.push(Action.decode(reader, reader.uint32()));
          break;

        case 6:
          message.signature = Signature.decode(reader, reader.uint32());
          break;

        case 7:
          message.hash = CryptoHash.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  signerId: string;
  publicKey: PublicKey | null;
  nonce: u64;
  receiverId: string;
  actions: Array<Action>;
  signature: Signature | null;
  hash: CryptoHash | null;

  constructor(
    signerId: string = "",
    publicKey: PublicKey | null = null,
    nonce: u64 = 0,
    receiverId: string = "",
    actions: Array<Action> = [],
    signature: Signature | null = null,
    hash: CryptoHash | null = null
  ) {
    this.signerId = signerId;
    this.publicKey = publicKey;
    this.nonce = nonce;
    this.receiverId = receiverId;
    this.actions = actions;
    this.signature = signature;
    this.hash = hash;
  }
}
