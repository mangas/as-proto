// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.24.4

import { Writer, Reader } from "as-proto/assembly";
import { BigInt } from "./BigInt";
import { ValidatorStake } from "./ValidatorStake";
import { Signature } from "./Signature";

export class ChunkHeader {
  static encode(message: ChunkHeader, writer: Writer): void {
    writer.uint32(10);
    writer.bytes(message.chunkHash);

    writer.uint32(18);
    writer.bytes(message.prevBlockHash);

    writer.uint32(26);
    writer.bytes(message.outcomeRoot);

    writer.uint32(34);
    writer.bytes(message.prevStateRoot);

    writer.uint32(42);
    writer.bytes(message.encodedMerkleRoot);

    writer.uint32(48);
    writer.uint64(message.encodedLength);

    writer.uint32(56);
    writer.uint64(message.heightCreated);

    writer.uint32(64);
    writer.uint64(message.heightIncluded);

    writer.uint32(72);
    writer.uint64(message.shardId);

    writer.uint32(80);
    writer.uint64(message.gasUsed);

    writer.uint32(88);
    writer.uint64(message.gasLimit);

    const validatorReward = message.validatorReward;
    if (validatorReward !== null) {
      writer.uint32(98);
      writer.fork();
      BigInt.encode(validatorReward, writer);
      writer.ldelim();
    }

    const balanceBurnt = message.balanceBurnt;
    if (balanceBurnt !== null) {
      writer.uint32(106);
      writer.fork();
      BigInt.encode(balanceBurnt, writer);
      writer.ldelim();
    }

    writer.uint32(114);
    writer.bytes(message.outgoingReceiptsRoot);

    writer.uint32(122);
    writer.bytes(message.txRoot);

    const validatorProposals = message.validatorProposals;
    for (let i: i32 = 0; i < validatorProposals.length; ++i) {
      writer.uint32(130);
      writer.fork();
      ValidatorStake.encode(validatorProposals[i], writer);
      writer.ldelim();
    }

    const signature = message.signature;
    if (signature !== null) {
      writer.uint32(138);
      writer.fork();
      Signature.encode(signature, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): ChunkHeader {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ChunkHeader();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.chunkHash = reader.bytes();
          break;

        case 2:
          message.prevBlockHash = reader.bytes();
          break;

        case 3:
          message.outcomeRoot = reader.bytes();
          break;

        case 4:
          message.prevStateRoot = reader.bytes();
          break;

        case 5:
          message.encodedMerkleRoot = reader.bytes();
          break;

        case 6:
          message.encodedLength = reader.uint64();
          break;

        case 7:
          message.heightCreated = reader.uint64();
          break;

        case 8:
          message.heightIncluded = reader.uint64();
          break;

        case 9:
          message.shardId = reader.uint64();
          break;

        case 10:
          message.gasUsed = reader.uint64();
          break;

        case 11:
          message.gasLimit = reader.uint64();
          break;

        case 12:
          message.validatorReward = BigInt.decode(reader, reader.uint32());
          break;

        case 13:
          message.balanceBurnt = BigInt.decode(reader, reader.uint32());
          break;

        case 14:
          message.outgoingReceiptsRoot = reader.bytes();
          break;

        case 15:
          message.txRoot = reader.bytes();
          break;

        case 16:
          message.validatorProposals.push(
            ValidatorStake.decode(reader, reader.uint32())
          );
          break;

        case 17:
          message.signature = Signature.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  chunkHash: Uint8Array;
  prevBlockHash: Uint8Array;
  outcomeRoot: Uint8Array;
  prevStateRoot: Uint8Array;
  encodedMerkleRoot: Uint8Array;
  encodedLength: u64;
  heightCreated: u64;
  heightIncluded: u64;
  shardId: u64;
  gasUsed: u64;
  gasLimit: u64;
  validatorReward: BigInt | null;
  balanceBurnt: BigInt | null;
  outgoingReceiptsRoot: Uint8Array;
  txRoot: Uint8Array;
  validatorProposals: Array<ValidatorStake>;
  signature: Signature | null;

  constructor(
    chunkHash: Uint8Array = new Uint8Array(0),
    prevBlockHash: Uint8Array = new Uint8Array(0),
    outcomeRoot: Uint8Array = new Uint8Array(0),
    prevStateRoot: Uint8Array = new Uint8Array(0),
    encodedMerkleRoot: Uint8Array = new Uint8Array(0),
    encodedLength: u64 = 0,
    heightCreated: u64 = 0,
    heightIncluded: u64 = 0,
    shardId: u64 = 0,
    gasUsed: u64 = 0,
    gasLimit: u64 = 0,
    validatorReward: BigInt | null = null,
    balanceBurnt: BigInt | null = null,
    outgoingReceiptsRoot: Uint8Array = new Uint8Array(0),
    txRoot: Uint8Array = new Uint8Array(0),
    validatorProposals: Array<ValidatorStake> = [],
    signature: Signature | null = null
  ) {
    this.chunkHash = chunkHash;
    this.prevBlockHash = prevBlockHash;
    this.outcomeRoot = outcomeRoot;
    this.prevStateRoot = prevStateRoot;
    this.encodedMerkleRoot = encodedMerkleRoot;
    this.encodedLength = encodedLength;
    this.heightCreated = heightCreated;
    this.heightIncluded = heightIncluded;
    this.shardId = shardId;
    this.gasUsed = gasUsed;
    this.gasLimit = gasLimit;
    this.validatorReward = validatorReward;
    this.balanceBurnt = balanceBurnt;
    this.outgoingReceiptsRoot = outgoingReceiptsRoot;
    this.txRoot = txRoot;
    this.validatorProposals = validatorProposals;
    this.signature = signature;
  }
}
