// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.24.4

import { Writer, Reader } from "as-proto/assembly";
import { MerklePath } from "./MerklePath";
import { CryptoHash } from "./CryptoHash";
import { ExecutionOutcome } from "./ExecutionOutcome";

export class ExecutionOutcomeWithId {
  static encode(message: ExecutionOutcomeWithId, writer: Writer): void {
    const proof = message.proof;
    if (proof !== null) {
      writer.uint32(10);
      writer.fork();
      MerklePath.encode(proof, writer);
      writer.ldelim();
    }

    const blockHash = message.blockHash;
    if (blockHash !== null) {
      writer.uint32(18);
      writer.fork();
      CryptoHash.encode(blockHash, writer);
      writer.ldelim();
    }

    const id = message.id;
    if (id !== null) {
      writer.uint32(26);
      writer.fork();
      CryptoHash.encode(id, writer);
      writer.ldelim();
    }

    const outcome = message.outcome;
    if (outcome !== null) {
      writer.uint32(34);
      writer.fork();
      ExecutionOutcome.encode(outcome, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): ExecutionOutcomeWithId {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ExecutionOutcomeWithId();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.proof = MerklePath.decode(reader, reader.uint32());
          break;

        case 2:
          message.blockHash = CryptoHash.decode(reader, reader.uint32());
          break;

        case 3:
          message.id = CryptoHash.decode(reader, reader.uint32());
          break;

        case 4:
          message.outcome = ExecutionOutcome.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  proof: MerklePath | null;
  blockHash: CryptoHash | null;
  id: CryptoHash | null;
  outcome: ExecutionOutcome | null;

  constructor(
    proof: MerklePath | null = null,
    blockHash: CryptoHash | null = null,
    id: CryptoHash | null = null,
    outcome: ExecutionOutcome | null = null
  ) {
    this.proof = proof;
    this.blockHash = blockHash;
    this.id = id;
    this.outcome = outcome;
  }
}
