// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.24.4

import { Writer, Reader } from "as-proto/assembly";
import { PublicKey } from "./PublicKey";
import { BigInt } from "./BigInt";

export class ValidatorStake {
  static encode(message: ValidatorStake, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.accountId);

    const publicKey = message.publicKey;
    if (publicKey !== null) {
      writer.uint32(18);
      writer.fork();
      PublicKey.encode(publicKey, writer);
      writer.ldelim();
    }

    const stake = message.stake;
    if (stake !== null) {
      writer.uint32(26);
      writer.fork();
      BigInt.encode(stake, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): ValidatorStake {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ValidatorStake();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.accountId = reader.string();
          break;

        case 2:
          message.publicKey = PublicKey.decode(reader, reader.uint32());
          break;

        case 3:
          message.stake = BigInt.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  accountId: string;
  publicKey: PublicKey | null;
  stake: BigInt | null;

  constructor(
    accountId: string = "",
    publicKey: PublicKey | null = null,
    stake: BigInt | null = null
  ) {
    this.accountId = accountId;
    this.publicKey = publicKey;
    this.stake = stake;
  }
}
