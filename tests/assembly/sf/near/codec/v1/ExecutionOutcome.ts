// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.24.4

import { Writer, Reader } from "as-proto/assembly";
import { CryptoHash } from "./CryptoHash";
import { BigInt } from "./BigInt";
import { UnknownExecutionStatus } from "./UnknownExecutionStatus";
import { FailureExecutionStatus } from "./FailureExecutionStatus";
import { SuccessValueExecutionStatus } from "./SuccessValueExecutionStatus";
import { SuccessReceiptIdExecutionStatus } from "./SuccessReceiptIdExecutionStatus";
import { ExecutionMetadata } from "./ExecutionMetadata";

export class ExecutionOutcome {
  static encode(message: ExecutionOutcome, writer: Writer): void {
    const logs = message.logs;
    if (logs.length !== 0) {
      for (let i: i32 = 0; i < logs.length; ++i) {
        writer.uint32(10);
        writer.string(logs[i]);
      }
    }

    const receiptIds = message.receiptIds;
    for (let i: i32 = 0; i < receiptIds.length; ++i) {
      writer.uint32(18);
      writer.fork();
      CryptoHash.encode(receiptIds[i], writer);
      writer.ldelim();
    }

    writer.uint32(24);
    writer.uint64(message.gasBurnt);

    const tokensBurnt = message.tokensBurnt;
    if (tokensBurnt !== null) {
      writer.uint32(34);
      writer.fork();
      BigInt.encode(tokensBurnt, writer);
      writer.ldelim();
    }

    writer.uint32(42);
    writer.string(message.executorId);

    const unknown = message.unknown;
    if (unknown !== null) {
      writer.uint32(162);
      writer.fork();
      UnknownExecutionStatus.encode(unknown, writer);
      writer.ldelim();
    }

    const failure = message.failure;
    if (failure !== null) {
      writer.uint32(170);
      writer.fork();
      FailureExecutionStatus.encode(failure, writer);
      writer.ldelim();
    }

    const successValue = message.successValue;
    if (successValue !== null) {
      writer.uint32(178);
      writer.fork();
      SuccessValueExecutionStatus.encode(successValue, writer);
      writer.ldelim();
    }

    const successReceiptId = message.successReceiptId;
    if (successReceiptId !== null) {
      writer.uint32(186);
      writer.fork();
      SuccessReceiptIdExecutionStatus.encode(successReceiptId, writer);
      writer.ldelim();
    }

    writer.uint32(48);
    writer.int32(message.metadata);
  }

  static decode(reader: Reader, length: i32): ExecutionOutcome {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ExecutionOutcome();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.logs.push(reader.string());
          break;

        case 2:
          message.receiptIds.push(CryptoHash.decode(reader, reader.uint32()));
          break;

        case 3:
          message.gasBurnt = reader.uint64();
          break;

        case 4:
          message.tokensBurnt = BigInt.decode(reader, reader.uint32());
          break;

        case 5:
          message.executorId = reader.string();
          break;

        case 20:
          message.unknown = UnknownExecutionStatus.decode(
            reader,
            reader.uint32()
          );
          break;

        case 21:
          message.failure = FailureExecutionStatus.decode(
            reader,
            reader.uint32()
          );
          break;

        case 22:
          message.successValue = SuccessValueExecutionStatus.decode(
            reader,
            reader.uint32()
          );
          break;

        case 23:
          message.successReceiptId = SuccessReceiptIdExecutionStatus.decode(
            reader,
            reader.uint32()
          );
          break;

        case 6:
          message.metadata = reader.int32();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  logs: Array<string>;
  receiptIds: Array<CryptoHash>;
  gasBurnt: u64;
  tokensBurnt: BigInt | null;
  executorId: string;
  unknown: UnknownExecutionStatus | null;
  failure: FailureExecutionStatus | null;
  successValue: SuccessValueExecutionStatus | null;
  successReceiptId: SuccessReceiptIdExecutionStatus | null;
  metadata: ExecutionMetadata;

  constructor(
    logs: Array<string> = [],
    receiptIds: Array<CryptoHash> = [],
    gasBurnt: u64 = 0,
    tokensBurnt: BigInt | null = null,
    executorId: string = "",
    unknown: UnknownExecutionStatus | null = null,
    failure: FailureExecutionStatus | null = null,
    successValue: SuccessValueExecutionStatus | null = null,
    successReceiptId: SuccessReceiptIdExecutionStatus | null = null,
    metadata: ExecutionMetadata = 0
  ) {
    this.logs = logs;
    this.receiptIds = receiptIds;
    this.gasBurnt = gasBurnt;
    this.tokensBurnt = tokensBurnt;
    this.executorId = executorId;
    this.unknown = unknown;
    this.failure = failure;
    this.successValue = successValue;
    this.successReceiptId = successReceiptId;
    this.metadata = metadata;
  }
}
