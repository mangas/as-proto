// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.24.4

import { Writer, Reader } from "as-proto/assembly";
import { CryptoHash } from "./CryptoHash";
import { BigInt } from "./BigInt";

export class BlockHeader {
  static encode(message: BlockHeader, writer: Writer): void {
    writer.uint32(8);
    writer.uint64(message.height);

    const hash = message.hash;
    if (hash !== null) {
      writer.uint32(42);
      writer.fork();
      CryptoHash.encode(hash, writer);
      writer.ldelim();
    }

    writer.uint32(120);
    writer.uint64(message.timestampNanosec);

    const gasPrice = message.gasPrice;
    if (gasPrice !== null) {
      writer.uint32(154);
      writer.fork();
      BigInt.encode(gasPrice, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): BlockHeader {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new BlockHeader();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.height = reader.uint64();
          break;

        case 5:
          message.hash = CryptoHash.decode(reader, reader.uint32());
          break;

        case 15:
          message.timestampNanosec = reader.uint64();
          break;

        case 19:
          message.gasPrice = BigInt.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  height: u64;
  hash: CryptoHash | null;
  timestampNanosec: u64;
  gasPrice: BigInt | null;

  constructor(
    height: u64 = 0,
    hash: CryptoHash | null = null,
    timestampNanosec: u64 = 0,
    gasPrice: BigInt | null = null
  ) {
    this.height = height;
    this.hash = hash;
    this.timestampNanosec = timestampNanosec;
    this.gasPrice = gasPrice;
  }
}
