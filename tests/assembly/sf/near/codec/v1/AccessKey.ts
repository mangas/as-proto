// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.24.4

import { Writer, Reader } from "as-proto/assembly";
import { AccessKeyPermission } from "./AccessKeyPermission";

export class AccessKey {
  static encode(message: AccessKey, writer: Writer): void {
    writer.uint32(8);
    writer.uint64(message.nonce);

    const permission = message.permission;
    if (permission !== null) {
      writer.uint32(18);
      writer.fork();
      AccessKeyPermission.encode(permission, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): AccessKey {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new AccessKey();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.nonce = reader.uint64();
          break;

        case 2:
          message.permission = AccessKeyPermission.decode(
            reader,
            reader.uint32()
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  nonce: u64;
  permission: AccessKeyPermission | null;

  constructor(nonce: u64 = 0, permission: AccessKeyPermission | null = null) {
    this.nonce = nonce;
    this.permission = permission;
  }
}
