// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.24.4

import { Writer, Reader } from "as-proto/assembly";
import { IndexerChunk } from "./IndexerChunk";
import { IndexerExecutionOutcomeWithReceipt } from "./IndexerExecutionOutcomeWithReceipt";

export class IndexerShard {
  static encode(message: IndexerShard, writer: Writer): void {
    writer.uint32(8);
    writer.uint64(message.shardId);

    const chunk = message.chunk;
    if (chunk !== null) {
      writer.uint32(18);
      writer.fork();
      IndexerChunk.encode(chunk, writer);
      writer.ldelim();
    }

    const receiptExecutionOutcomes = message.receiptExecutionOutcomes;
    for (let i: i32 = 0; i < receiptExecutionOutcomes.length; ++i) {
      writer.uint32(26);
      writer.fork();
      IndexerExecutionOutcomeWithReceipt.encode(
        receiptExecutionOutcomes[i],
        writer
      );
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): IndexerShard {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new IndexerShard();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.shardId = reader.uint64();
          break;

        case 2:
          message.chunk = IndexerChunk.decode(reader, reader.uint32());
          break;

        case 3:
          message.receiptExecutionOutcomes.push(
            IndexerExecutionOutcomeWithReceipt.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  shardId: u64;
  chunk: IndexerChunk | null;
  receiptExecutionOutcomes: Array<IndexerExecutionOutcomeWithReceipt>;

  constructor(
    shardId: u64 = 0,
    chunk: IndexerChunk | null = null,
    receiptExecutionOutcomes: Array<IndexerExecutionOutcomeWithReceipt> = []
  ) {
    this.shardId = shardId;
    this.chunk = chunk;
    this.receiptExecutionOutcomes = receiptExecutionOutcomes;
  }
}
