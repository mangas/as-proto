// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.24.4

import { Writer, Reader } from "as-proto/assembly";
import { StateChangeValue } from "./StateChangeValue";
import { StateChangeCause } from "./StateChangeCause";

export class StateChangeWithCause {
  static encode(message: StateChangeWithCause, writer: Writer): void {
    const value = message.value;
    if (value !== null) {
      writer.uint32(10);
      writer.fork();
      StateChangeValue.encode(value, writer);
      writer.ldelim();
    }

    const cause = message.cause;
    if (cause !== null) {
      writer.uint32(18);
      writer.fork();
      StateChangeCause.encode(cause, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): StateChangeWithCause {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new StateChangeWithCause();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.value = StateChangeValue.decode(reader, reader.uint32());
          break;

        case 2:
          message.cause = StateChangeCause.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  value: StateChangeValue | null;
  cause: StateChangeCause | null;

  constructor(
    value: StateChangeValue | null = null,
    cause: StateChangeCause | null = null
  ) {
    this.value = value;
    this.cause = cause;
  }
}
