// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.24.4

import { Writer, Reader } from "as-proto/assembly";
import { ActionError } from "./ActionError";
import { InvalidTxError } from "./InvalidTxError";

export class FailureExecutionStatus {
  static encode(message: FailureExecutionStatus, writer: Writer): void {
    const actionError = message.actionError;
    if (actionError !== null) {
      writer.uint32(10);
      writer.fork();
      ActionError.encode(actionError, writer);
      writer.ldelim();
    }

    writer.uint32(16);
    writer.int32(message.invalidTxError);
  }

  static decode(reader: Reader, length: i32): FailureExecutionStatus {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new FailureExecutionStatus();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.actionError = ActionError.decode(reader, reader.uint32());
          break;

        case 2:
          message.invalidTxError = reader.int32();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  actionError: ActionError | null;
  invalidTxError: InvalidTxError;

  constructor(
    actionError: ActionError | null = null,
    invalidTxError: InvalidTxError = 0
  ) {
    this.actionError = actionError;
    this.invalidTxError = invalidTxError;
  }
}
