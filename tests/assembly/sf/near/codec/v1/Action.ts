// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.24.4

import { Writer, Reader } from "as-proto/assembly";
import { CreateAccountAction } from "./CreateAccountAction";
import { DeployContractAction } from "./DeployContractAction";
import { FunctionCallAction } from "./FunctionCallAction";
import { TransferAction } from "./TransferAction";
import { StakeAction } from "./StakeAction";
import { AddKeyAction } from "./AddKeyAction";
import { DeleteKeyAction } from "./DeleteKeyAction";
import { DeleteAccountAction } from "./DeleteAccountAction";

export class Action {
  static encode(message: Action, writer: Writer): void {
    const createAccount = message.createAccount;
    if (createAccount !== null) {
      writer.uint32(10);
      writer.fork();
      CreateAccountAction.encode(createAccount, writer);
      writer.ldelim();
    }

    const deployContract = message.deployContract;
    if (deployContract !== null) {
      writer.uint32(18);
      writer.fork();
      DeployContractAction.encode(deployContract, writer);
      writer.ldelim();
    }

    const functionCall = message.functionCall;
    if (functionCall !== null) {
      writer.uint32(26);
      writer.fork();
      FunctionCallAction.encode(functionCall, writer);
      writer.ldelim();
    }

    const transfer = message.transfer;
    if (transfer !== null) {
      writer.uint32(34);
      writer.fork();
      TransferAction.encode(transfer, writer);
      writer.ldelim();
    }

    const stake = message.stake;
    if (stake !== null) {
      writer.uint32(42);
      writer.fork();
      StakeAction.encode(stake, writer);
      writer.ldelim();
    }

    const addKey = message.addKey;
    if (addKey !== null) {
      writer.uint32(50);
      writer.fork();
      AddKeyAction.encode(addKey, writer);
      writer.ldelim();
    }

    const deleteKey = message.deleteKey;
    if (deleteKey !== null) {
      writer.uint32(58);
      writer.fork();
      DeleteKeyAction.encode(deleteKey, writer);
      writer.ldelim();
    }

    const deleteAccount = message.deleteAccount;
    if (deleteAccount !== null) {
      writer.uint32(66);
      writer.fork();
      DeleteAccountAction.encode(deleteAccount, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Action {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Action();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.createAccount = CreateAccountAction.decode(
            reader,
            reader.uint32()
          );
          break;

        case 2:
          message.deployContract = DeployContractAction.decode(
            reader,
            reader.uint32()
          );
          break;

        case 3:
          message.functionCall = FunctionCallAction.decode(
            reader,
            reader.uint32()
          );
          break;

        case 4:
          message.transfer = TransferAction.decode(reader, reader.uint32());
          break;

        case 5:
          message.stake = StakeAction.decode(reader, reader.uint32());
          break;

        case 6:
          message.addKey = AddKeyAction.decode(reader, reader.uint32());
          break;

        case 7:
          message.deleteKey = DeleteKeyAction.decode(reader, reader.uint32());
          break;

        case 8:
          message.deleteAccount = DeleteAccountAction.decode(
            reader,
            reader.uint32()
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  createAccount: CreateAccountAction | null;
  deployContract: DeployContractAction | null;
  functionCall: FunctionCallAction | null;
  transfer: TransferAction | null;
  stake: StakeAction | null;
  addKey: AddKeyAction | null;
  deleteKey: DeleteKeyAction | null;
  deleteAccount: DeleteAccountAction | null;

  constructor(
    createAccount: CreateAccountAction | null = null,
    deployContract: DeployContractAction | null = null,
    functionCall: FunctionCallAction | null = null,
    transfer: TransferAction | null = null,
    stake: StakeAction | null = null,
    addKey: AddKeyAction | null = null,
    deleteKey: DeleteKeyAction | null = null,
    deleteAccount: DeleteAccountAction | null = null
  ) {
    this.createAccount = createAccount;
    this.deployContract = deployContract;
    this.functionCall = functionCall;
    this.transfer = transfer;
    this.stake = stake;
    this.addKey = addKey;
    this.deleteKey = deleteKey;
    this.deleteAccount = deleteAccount;
  }
}
